import os
from conans import ConanFile, CMake, tools
from conans.util import files


class LibrdkafkaConan(ConanFile):
    name = "librdkafka"
    sha256 = "2b96d7ed71470b0d0027bd9f0b6eb8fb68ed979f8092611c148771eb01abb72c"

    src_version = "0.11.3"
    version = "0.11.3-dm3"
    license = "BSD 2-Clause"
    url = "https://github.com/ess-dmsc/conan-librdkafka"
    win32_patch_name = "win32.patch"
    win32_sha = "6eeb23b13726d371b737bb39b8d667d36b8793b5"
    description = "The Apache Kafka C/C++ library"
    settings = "os", "compiler", "build_type", "arch"
    generators = "cmake"
    build_requires = "cmake_installer/3.10.0@conan/stable"
    options = { "shared": [True, False],
                "build_examples": [False, True],
                "build_tests": [False, True],
                "with_zlib": [True, False],
                "with_openssl": [True, False] }
    default_options = "shared=False", "build_examples=False", "build_tests=False", "with_zlib=False", "with_openssl=False"

    folder_name = "{}-{}".format(name, src_version)
    archive_name = "{}.tar.gz".format(folder_name)
    
    # For Windows use short paths (ignored for other OS's)
    short_paths=True

    def requirements(self):
        if self.options.with_zlib:
            self.requires('zlib/1.2.11@conan/stable', private=True)
        if self.options.with_openssl:
            self.requires('OpenSSL/1.1.0g@conan/stable')

    def configure(self):
        # Remove these options on Windows because they require
        # UNIX/BSD-specific header files and functions
        if self.settings.os == 'Windows':
            
            if self.options.build_tests:
                self.output.warn('Ignoring build_tests option on Windows')
                self.options.build_tests = False


    def source(self):
        if tools.os_info.is_windows:
            # For windows we use an RC of 0.11.4 as it has cmake fixes.
            # Once we move to 0.11.4+ this can be removed.
            tools.download(
                "https://github.com/edenhill/librdkafka/archive/{}.tar.gz".format(
                    self.win32_sha
                ),
                self.archive_name
            )
            self.folder_name = "librdkafka-{}".format(self.win32_sha)
        else:
            tools.download(
                "https://github.com/edenhill/librdkafka/archive/v{}.tar.gz".format(
                    self.src_version
                ),
                self.archive_name
            )
            tools.check_sha256(
                self.archive_name,
                self.sha256
            )
        tools.unzip(self.archive_name)
        os.unlink(self.archive_name)

    def build(self):
    
        self.folder_name = "librdkafka-{}".format(self.win32_sha)
    
        # put conan inclusion into CMakeLists.txt file or fail (strict=True)
        self.output.info('Patching CMakeLists.txt')
        tools.replace_in_file(os.sep.join([self.folder_name, "CMakeLists.txt"]), "project(RdKafka)",
        '''project(RdKafka)
           include(${CMAKE_BINARY_DIR}/../../conanbuildinfo.cmake)
           conan_basic_setup()''')

        # src/rd.h includes win32_config.h which is not generated by CMake/Conan 
        # so it builds librdkafka with fixed settings (!!!).
        # This change removes that choice, and  both platforms use the generated config.h file
        self.output.info('Patching src/rd.h file')
        tools.replace_in_file(os.sep.join([self.folder_name, 'src', 'rd.h']),
'''
#ifdef _MSC_VER
/* Visual Studio */
#include "win32_config.h"
#else
/* POSIX / UNIX based systems */
#include "../config.h" /* mklove output */
#endif
''',
'#include "../config.h"')

        # rdkafka C++ library does not export the special partition and offset constants/values
        # from the DLL, and looks like is switching to a preprocessor define instead.  This includes
        # the C-header file just to get the macro values, and then changes the constants from being
        # used as imported values to read from the macros.
        self.output.info('pwd=%s' % (os.getcwd()))
        tools.replace_in_file(os.sep.join([self.folder_name, "examples", "rdkafka_example.cpp"]), '#include "rdkafkacpp.h"', 
'''#include "rdkafkacpp.h"
#include "rdkafka.h"''')
        tools.replace_in_file(os.sep.join([self.folder_name, "examples", "rdkafka_example.cpp"]), 'RdKafka::Topic::PARTITION_UA', 'RD_KAFKA_PARTITION_UA')
        tools.replace_in_file(os.sep.join([self.folder_name, "examples", "rdkafka_example.cpp"]), 'RdKafka::Topic::OFFSET_BEGINNING', 'RD_KAFKA_OFFSET_BEGINNING')
        tools.replace_in_file(os.sep.join([self.folder_name, "examples", "rdkafka_example.cpp"]), 'RdKafka::Topic::OFFSET_END', 'RD_KAFKA_OFFSET_END')
        tools.replace_in_file(os.sep.join([self.folder_name, "examples", "rdkafka_example.cpp"]), 'RdKafka::Topic::OFFSET_STORED', 'RD_KAFKA_OFFSET_STORED')

        files.mkdir("./{}/build".format(self.folder_name))
        with tools.chdir("./{}/build".format(self.folder_name)):
            cmake = CMake(self)

            cmake.definitions["RDKAFKA_BUILD_EXAMPLES"] = "ON" if self.options.build_examples else "OFF"
            cmake.definitions["RDKAFKA_BUILD_TESTS"] = "ON"  if self.options.build_tests else "OFF"
            cmake.definitions["WITH_LIBDL"] = "OFF"
            cmake.definitions["WITH_PLUGINS"] = "OFF"
            cmake.definitions["WITH_SASL"] = "OFF"
            cmake.definitions["WITH_SSL"] = "ON" if self.options.with_openssl else "OFF"
            cmake.definitions["WITH_ZLIB"] = "ON" if self.options.with_zlib else "OFF"
            if tools.os_info.is_macos and self.options.shared:
                cmake.definitions["CMAKE_MACOSX_RPATH"] = "ON"

            if self.settings.build_type == "Debug":
                cmake.definitions["WITHOUT_OPTIMIZATION"] = "ON"
            if self.options.shared:
                cmake.definitions["BUILD_SHARED_LIBS"] = "ON"

            if tools.os_info.is_windows:
                # Enables overridding of default window build settings
                cmake.definitions["WITHOUT_WIN32_CONFIG"] = "ON"

            cmake.configure(source_dir="..", build_dir=".")
            cmake.build(build_dir=".")

            os.rename("../LICENSE", "../LICENSE.librdkafka")

    def package(self):
        self.copy("rdkafka.h", dst="include/librdkafka",
                  src="{}/src".format(self.folder_name))
        self.copy("rdkafkacpp.h", dst="include/librdkafka",
                  src="{}/src-cpp".format(self.folder_name))
        
        # Copy Windows import libraries, program DB's, export, linker input files, etc...
        self.copy("*.lib", src=os.sep.join([self.folder_name, 'build', 'lib' ]), dst="lib", keep_path=False)
        self.copy("*.exp", src=os.sep.join([self.folder_name, 'build', 'lib' ]), dst="lib", keep_path=False)
        self.copy("*.pdb", src=os.sep.join([self.folder_name, 'build', 'lib' ]), dst="bin", keep_path=False)
        
        self.copy("*.dll", src=os.sep.join([self.folder_name, 'build', 'bin' ]), dst="bin", keep_path=False)
        self.copy("*.ilk", src=os.sep.join([self.folder_name, 'build', 'lib' ]), dst="bin", keep_path=False)
        self.copy("*.pdb", src=os.sep.join([self.folder_name, 'build', 'bin' ]), dst="bin", keep_path=False)

        # copy example executables (if they exist) with somewhat restrictive patterns
        for example_bin in ['kafkatest_verifiable_client*', 'rdkafka_consumer_example*', \
                            'rdkafka_example*', 'rdkafka_performance*', 'rdkafka_simple_producer*', \
                            'rdkafka_test*']:

            self.copy(example_bin, src=os.sep.join([self.folder_name, 'build', 'bin' ]), dst="bin", keep_path=False)

        # Copy Linux/Mac files
            self.copy("*.a", dst="lib", keep_path=False)

        if tools.os_info.is_macos:
            self.copy("*.dylib*", dst="lib", keep_path=False)
        elif tools.os_info.is_windows:
            self.copy("*.lib", dst="lib", keep_path=False)
        else:
            self.copy("*.so*", dst="lib", keep_path=False, symlinks=True)
        self.copy("LICENSE.*", src=self.folder_name)

    def package_info(self):
        self.cpp_info.libs = tools.collect_libs(self)
        if self.settings.os == 'Linux':
            self.cpp_info.libs.extend([ 'rt', 'dl' ])
        
